/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// a simple command to generate a golang file containing a Version constant

package main

import (
	"fmt"
	"io"
	"os"
	"text/template"
	"time"

	"sigs.k8s.io/kind/pkg/exec"
)

const versionTemplate = `/*
Copyright {{.Year}} The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by sigs.k8s.io/kind/hack/version DO NOT EDIT.

package {{.Package}}

// Version is the kind cli version
const Version = "{{.Version}}"
`

type info struct {
	Version string
	Package string
	Year    string
}

func writeVersionFile(out io.Writer, in *info) error {
	t, err := template.New("version-file").Parse(versionTemplate)
	if err != nil {
		return err
	}
	return t.Execute(out, in)
}

func getVersion() (string, error) {
	// first check for the env
	version := os.Getenv("VERSION")
	if version != "" {
		return version, nil
	}
	// then query git instead
	cmd := exec.Command("git", "describe", "--tags")
	lines, err := cmd.CombinedOutputLines()
	if err != nil {
		return "", err
	}
	return lines[0], nil
}

func getYear() string {
	return time.Now().UTC().Format("2006")
}

func failIfErr(err error) {
	if err != nil {
		fmt.Fprint(os.Stderr, err.Error())
		os.Exit(-1)
	}
}

func getEnvDefault(key, defaultValue string) string {
	value, exists := os.LookupEnv(key)
	if !exists {
		value = defaultValue
	}
	return value
}

func main() {
	version, err := getVersion()
	failIfErr(err)

	f, err := os.Create("version.go")
	failIfErr(err)
	defer f.Close()

	err = writeVersionFile(
		f,
		&info{
			Version: version,
			Year:    getYear(),
			// go generate sets this
			Package: getEnvDefault("PACKAGE", "kind"),
		},
	)
	failIfErr(err)

	f.Sync()
}
