// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/clean-install
// ../../../../images/base/entrypoint/main.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7d\x6f\xdb\x38\x93\xff\xdf\x9f\x62\x20\x07\x4f\x93\xae\x65\xa5\x49\xb3\x9b\xa6\xc8\x1e\xdc\xc4\xcd\x63\x34\xb5\x0b\xdb\x6d\x51\x3c\xbb\x08\x28\x6a\x2c\x71\x4d\x91\x3a\xbe\xd8\x71\xbb\xfd\xee\x87\xa1\x24\xdb\x49\xdb\xbd\x05\xf6\x2e\x08\x60\x5b\x22\xe7\xf5\x37\x33\x3f\xb2\x0b\x57\xba\xda\x18\x91\x17\x0e\x4e\x8e\x9f\x9d\xc3\xbc\x40\x78\xe3\x53\x34\x0a\x1d\x5a\x18\x78\x57\x68\x63\xfb\x9d\x6e\xa7\x0b\xb7\x82\xa3\xb2\x98\x81\x57\x19\x1a\x70\x05\xc2\xa0\x62\xbc\xc0\xf6\x4d\x0f\x3e\xa0\xb1\x42\x2b\x38\xe9\x1f\xc3\x21\x2d\x88\x9a\x57\xd1\xd1\xcb\x4e\x17\x36\xda\x43\xc9\x36\xa0\xb4\x03\x6f\x11\x5c\x21\x2c\x2c\x84\x44\xc0\x7b\x8e\x95\x03\xa1\x80\xeb\xb2\x92\x82\x29\x8e\xb0\x16\xae\x08\x6a\x1a\x21\xfd\x4e\x17\x3e\x35\x22\x74\xea\x98\x50\xc0\x80\xeb\x6a\x03\x7a\xb1\xbf\x0e\x98\x0b\x06\xd3\x5f\xe1\x5c\x75\x91\x24\xeb\xf5\xba\xcf\x82\xb1\x7d\x6d\xf2\x44\xd6\x0b\x6d\x72\x3b\xba\x1a\x8e\x67\xc3\xf8\xa4\x7f\x1c\xb6\xbc\x57\x12\xad\x05\x83\xff\xed\x85\xc1\x0c\xd2\x0d\xb0\xaa\x92\x82\xb3\x54\x22\x48\xb6\x06\x6d\x80\xe5\x06\x31\x03\xa7\xc9\xde\xb5\x11\x4e\xa8\xbc\x07\x56\x2f\xdc\x9a\x19\xec\x74\x21\x13\xd6\x19\x91\x7a\xf7\x20\x58\xad\x75\xc2\x3e\x58\xa0\x15\x30\x05\xd1\x60\x06\xa3\x59\x04\xaf\x06\xb3\xd1\xac\xd7\xe9\xc2\xc7\xd1\xfc\xdf\x93\xf7\x73\xf8\x38\x98\x4e\x07\xe3\xf9\x68\x38\x83\xc9\x14\xae\x26\xe3\xeb\xd1\x7c\x34\x19\xcf\x60\xf2\x1a\x06\xe3\x4f\xf0\x66\x34\xbe\xee\x01\x0a\x57\xa0\x01\xbc\xaf\x0c\xd9\xaf\x0d\x08\x0a\x23\x66\x14\xb3\x19\xe2\x03\x03\x16\xba\x36\xc8\x56\xc8\xc5\x42\x70\x90\x4c\xe5\x9e\xe5\x08\xb9\x5e\xa1\x51\x42\xe5\x50\xa1\x29\x85\xa5\x64\x5a\x60\x2a\xeb\x74\x41\x8a\x52\x38\xe6\xc2\x93\x6f\x9c\xea\x77\x3a\x5d\x58\x0a\x95\x01\x97\xde\x3a\x34\x90\x32\x72\xb5\x64\x39\xf6\x20\xf5\x42\x3a\x72\xd4\xa7\x5e\x39\x7f\xf1\xec\xbc\x7f\xfc\x3c\xc4\x7b\xae\x6b\x10\xac\x11\x58\x96\x81\xdd\x58\x87\x65\xd6\x83\xab\xf1\xa8\x47\x7a\x41\x07\xbf\x9c\xd6\xd2\x82\x42\xcc\xea\xb8\x1b\xaf\x02\x4c\x59\x56\x06\x31\xaf\xb5\x69\xf7\xc2\x4f\x90\x69\xbe\x44\x03\x5c\xab\x85\xc8\xbd\x09\x36\x13\xde\x32\x48\x51\xea\x75\x0f\x6c\x13\x90\x85\x96\x52\xaf\xc9\x5d\x83\x0b\x34\xa8\x38\xda\x8b\x4e\x37\x80\xc6\x36\xa8\x59\x50\xae\xd1\x2e\x9d\xae\x02\x74\xd6\x62\x29\x92\x59\x93\xeb\xa4\x51\x9a\x5c\x69\x45\x78\x44\x33\x52\x0e\xcd\x82\x71\x4c\xf6\xe4\x64\xb8\x42\xa9\x2b\x34\xb6\x6f\x30\x2b\x98\xeb\x73\x5d\x26\xa9\xd4\x79\x72\x72\xfc\xec\x79\x72\x7c\x46\xff\xc6\x2b\x0a\x7d\xdc\xc8\x8c\x09\xfe\x42\xc5\xb5\x37\x31\x6f\x35\xfc\x7d\xc1\x3f\x27\xc7\x2f\x92\x67\xa7\xdf\x08\x16\x2a\x66\xb1\xd2\x2a\xae\x8c\x58\x09\x89\x39\x66\xfb\xe2\x3b\x83\xe9\x0d\xe1\x70\x78\x37\x7a\x3b\xb8\x19\x5e\x46\xfb\x59\x8b\x3a\xaf\xa7\x93\xb7\x70\xf0\x65\xb7\xe0\x2b\xe5\xde\xa2\xa3\x32\x80\xeb\xe1\xab\xd1\x60\x7c\xf7\x7a\x3a\x19\xcf\x87\xe3\xeb\x4b\xa5\x95\xa0\x90\x30\xee\xc4\x0a\xc1\x3a\x5d\x59\xb0\xba\x44\x60\x95\x83\x35\x0b\x68\xb3\xbd\x1a\x05\xc2\x86\xd6\xd0\xe9\x02\x03\x83\x4c\x02\x33\xb9\x2f\x51\xb9\x1e\xac\xf1\x89\x41\x38\x64\xe9\x91\xb7\xa4\x87\x6c\x74\x1a\x72\x74\xc0\xc0\x61\x59\x69\xc3\xcc\x06\x86\xe3\x0f\xc0\x72\x26\x54\x3f\x78\xf1\xd7\xd6\x74\x3a\x57\x93\x77\x9f\x80\x4b\x64\x2a\x16\xca\x3a\x26\x25\x24\xde\x9a\x44\x6a\xce\x64\x92\x0a\x95\x3c\x78\xd9\x99\xbe\x1f\x03\x2f\x4a\x9d\xc1\x4f\xf7\x7f\xbd\xb2\xd3\x85\x1b\x74\x90\x61\x85\x2a\x43\xc5\x05\x5a\x82\x7b\x81\x7b\x85\x01\x4c\x1a\x64\xd9\x06\x0a\x66\x2f\xc0\xda\xa2\x47\x41\xe9\x81\x55\xac\xca\xc2\xea\x3a\x26\xa9\xd1\x4b\x54\x90\xe9\xb5\x02\xa1\x9c\x86\x43\x64\xbc\x08\x8d\x03\xa4\x50\x78\x44\x98\x8d\xa1\x62\x7c\xc9\x72\xa4\x3a\xe1\x68\x2d\x85\x83\x2a\xbd\xb1\x88\x82\x56\x43\xe9\xf1\xe2\xfd\xa2\xb2\x68\x56\x82\xa3\x85\xc3\x06\x2c\x47\xdf\x5d\x4d\x72\x9b\x2a\x4b\xa0\xd8\x54\x68\x96\x3e\x45\x48\x60\xb9\x9b\x1d\xd4\xc8\xb5\x42\xe5\x6c\x10\x51\x0a\xcb\x77\x72\x0e\xbd\x13\x52\x38\x81\xa1\xf4\x69\x16\x08\x05\xda\x1b\x20\x1f\xa9\xda\x85\xca\x8f\xea\x80\x29\x5a\x11\x82\xeb\x2b\x38\x34\x58\xea\x15\xf9\xe2\xd5\x9a\x29\xea\x9f\x6d\xdd\xb7\xa6\xd3\xb6\xd7\x42\x31\x29\x37\xb4\x33\x13\x36\xf4\xee\x65\x69\x73\x52\xf2\x87\xf6\x46\x31\x99\xfd\xff\x95\x67\x00\xc9\x03\x4c\xfd\xd6\x09\xb3\x88\xb2\x1b\x3b\xc3\x94\xad\xb4\x71\x71\x50\x0f\x9c\xc5\x1c\x8d\xa3\x3e\xcc\x42\xd8\xbc\x91\xdb\x59\x12\x57\x86\xec\xa2\x38\xc5\x5c\x97\xa5\x56\x90\x2b\x5f\xe5\x27\x20\x6d\x1a\x1b\x94\x48\x60\x6a\xc5\x6f\x23\xd1\x58\x68\x37\x76\x05\x52\xa4\xcd\xef\xe3\xed\x42\xae\x95\x72\x86\xf1\x25\x88\xca\x51\x74\x2c\x88\xca\x68\xef\xf0\x04\xd0\x15\x14\x7f\xb0\x9a\x33\x07\x94\xa6\x58\x0a\xe5\xef\xa1\xd4\x5e\x39\xc0\xb4\xd9\xe0\x33\x5c\xc1\x92\x4a\x81\xf9\x85\x8d\xeb\x0e\xdd\x2a\x48\x99\x2d\xc0\xd8\x8d\xe2\xcd\xa3\x7f\xfd\x0b\x16\x34\x1d\x12\x29\xd2\x6d\xd3\xac\x3f\xe9\x43\x28\xe1\xfa\x8e\x99\x1c\x5d\x9f\xd2\x6a\x13\x88\x15\x2b\x11\xa2\xd6\x17\x57\x56\x44\x14\x6c\x6c\xd1\xf9\xaa\xdf\x24\x3b\x82\x38\x43\x89\x0e\x77\x6a\x4c\x09\xf1\xe2\xbb\x7a\x4a\x2f\x9d\x88\xbd\x45\xf3\x50\xd5\xd3\x6f\x36\xa3\xe3\x8f\x37\x3f\xfd\xe1\xe2\xef\x68\x0a\x4d\x21\x5e\xd8\xff\x4d\xcf\xf7\x82\x41\x70\x72\x8f\x77\x52\xb0\xff\xc1\x76\x0a\x2f\x77\xf2\x6f\x49\x48\x99\x15\xfc\x87\x86\x23\x2f\x34\x44\x53\x64\xd9\x9b\xb7\x36\xbf\x54\x3a\x82\x5f\x7f\x7d\x18\xb0\xb6\xc0\xfa\x34\x7f\xa9\x0f\x8e\x9a\x2a\xa8\x2b\xa5\x07\xeb\x42\xf0\x22\x74\x12\x4b\x6d\xa7\x60\x55\x85\x0a\xd8\x82\x58\xc3\x1a\xdb\x7e\x55\x0f\x89\x86\xd8\x6d\xfb\x06\x4b\xf5\x8a\x18\x16\x35\xd1\x40\x9d\xb6\x35\xac\xb9\xed\xd7\x1a\x42\xf5\x36\x52\x92\x80\xdd\xa4\x2d\x52\x4c\xea\x59\x96\x74\x2d\xba\xd8\x57\xb1\x2b\x30\x36\x58\x69\x2b\x9c\x36\x1b\x1a\x3c\x2a\xdb\xca\xdc\x35\xb3\xbe\xd0\x41\x43\x12\xd0\x97\x08\xd5\xf6\x75\xd7\x2a\x8a\x97\x35\x1d\x49\xba\xbb\x7e\x1b\xef\xf5\x5b\x1a\x54\xf5\xcf\x27\x16\x6e\xde\xdd\xc0\x12\x37\xe1\x05\xd1\x9e\xc0\x45\x84\xca\xd1\x54\x46\x28\xf7\xe0\xf9\x03\xeb\x62\xf0\x55\xc6\x1c\xd6\x73\x42\x3c\x0a\x6c\xd3\x24\x3b\x5d\x18\x4f\xe6\xc3\x0b\xa0\x81\xfd\x82\x06\x88\x5e\x2c\x04\x17\xa1\x23\x5a\x5f\x51\xf3\xa9\xa9\xed\x1e\xd3\xe7\xde\x18\x54\x4e\x6e\x88\xc8\x52\x1a\x2a\x41\x8d\x18\x1c\xb5\xc3\xbd\x5e\xf9\x9d\x98\x38\x66\x97\x36\x09\x0d\xe0\x9b\x68\xd4\x53\x78\x72\xf5\x66\x38\xbd\xfb\x30\x9c\xce\x46\x93\xf1\x65\x74\x16\xa8\xc4\x8b\xfe\xd3\x28\x04\xbc\xa1\x78\xdb\x19\x8e\x6a\xd5\x0b\x3c\xe0\x11\x09\xe8\x6f\x49\x46\x20\x0b\x4e\x03\x03\x62\x31\x9f\xd1\x68\x58\x31\xe9\x09\x18\x56\xc8\x40\xe3\x1a\x5a\x59\xf3\x0b\x58\x18\x5d\x86\xee\xbb\xc4\x0d\x0d\xcb\xe8\x63\xfd\xe2\xa2\x7d\x08\xda\xbb\xca\x3b\xb0\x85\xf6\x32\x0b\xda\x53\x82\x9d\x21\x98\x1d\x5a\x97\x69\xef\x5a\x7a\x42\x7c\xc3\x94\x34\x61\x8e\xa2\xe0\xdf\xe0\xdd\xfc\xee\xcd\xf0\xd3\xdd\xf5\x64\x3c\xbf\xfb\x38\x98\x8e\xef\x26\xe3\xbb\xeb\xc1\xf8\x66\x38\x9d\xbc\x9f\xdd\xbd\x9f\x05\x16\xb5\x60\xd2\x62\x54\x4f\x07\xea\xf1\xf1\xc2\xce\x6e\x21\xda\x01\x78\xad\xa4\x66\xd9\x3e\x88\x6b\xf0\x1e\x1c\xf6\xeb\x0a\xd3\xb6\x6d\xf9\x2f\x9b\x42\x3c\x18\x5d\x47\x47\x49\x5e\xe5\x11\xfc\xb9\x75\x85\x90\x13\xef\x4a\xb6\x7d\xbc\x07\x30\x38\x1e\xbe\x7a\x7d\x75\x7d\x7e\xbe\xb7\x2a\xcb\x62\x5a\xb9\x83\xdb\xb6\x99\x03\x44\x19\xa6\xf0\xcf\x0d\x85\x83\x43\x69\xd3\xbb\x76\x6c\xc5\xdc\x1e\x81\x0d\xe3\x24\xda\x19\xf2\x70\x72\x46\xdb\xca\xbd\x3c\xf8\xf2\x10\x47\x5f\x23\x6a\x2e\x43\x15\xa6\xfb\xd5\x74\x14\x48\xc9\x76\x0c\x67\x21\xd0\x62\x01\xff\x81\xf8\x1e\xa2\x83\x43\x1a\x9f\x54\xdc\xf1\x6a\x6f\xd1\x51\x04\xbf\xbf\xa4\x32\x53\xc1\x80\x72\x99\x09\x03\x71\x55\x7b\xd1\x10\x9c\xb6\xeb\x3d\xf9\x12\x71\x23\x76\x83\x3e\x8b\x2e\xc0\x19\x8f\x5f\x9f\xc0\xaf\xfb\x1b\x92\x8c\x61\xa9\x55\xff\x0f\xab\xd5\xcb\x6f\xa5\xee\xf6\x07\x6f\x77\xbf\xea\xe3\x0a\x64\xb8\x60\x5e\xba\x56\xe6\x6e\x41\x52\x2f\xe8\x3b\x5d\xca\x97\xbf\x75\x16\x62\xbf\xb7\x5e\x8d\x47\x90\x0a\xc5\x0c\x31\x2a\xa7\x21\xd1\x95\x4b\xb8\x12\xc4\x4c\x89\x46\x4d\xae\x27\x87\x29\x2a\x57\x20\xca\x0c\xcd\xd1\x05\x35\x0d\x58\x17\x1b\x48\x60\x5d\x30\x07\x05\x1a\x0c\x60\xbe\x1a\x8f\x76\x95\x7a\xdc\xff\xa5\x7f\x16\x6d\x9f\x07\xce\xff\x7e\x7a\x7b\xb9\x45\xad\x75\xda\xb0\x1c\xfb\xb9\xd6\xb9\x44\x56\x09\x1b\xf0\xb0\xeb\x12\x2d\x10\x12\x85\x6e\xad\xcd\x32\xae\xa4\xcf\x85\xb2\x49\x5d\x09\x78\x4f\xdd\x08\x06\xd3\xab\x7f\x5f\x1e\x1c\x66\xd5\x32\x87\x38\x0e\x18\x8d\x99\xe1\x85\x70\xc8\x9d\x37\xf8\x27\x50\x1d\x3e\xb1\x49\x55\xf1\x9f\x9f\xa3\xac\x3f\x25\x26\x4f\x8e\xf6\x66\x53\x2d\x8b\x0c\x9d\x0f\xa6\xaf\x06\xb7\xb7\x97\x11\x57\xa2\xd5\x18\x1f\x7c\x21\x35\x5f\xe3\xd5\xc1\x97\x3d\x27\xbf\xf6\x5d\xfe\x39\xfa\xae\x94\xe0\x69\xbd\xb8\xf5\xfc\x6b\xfd\xb3\x91\xff\x75\x1f\xb7\xa1\xa6\xa9\xa4\xe3\xd8\xa0\x33\x1b\x38\x83\x38\x6e\xda\x4a\xe2\xca\x8a\xd2\x41\xba\xa0\x11\x49\xd2\xf6\xf6\xdb\x82\x9d\x9c\xfd\x6c\x7d\xf9\x70\xf1\xf6\xfd\x0e\x45\x7b\xa9\xdd\xbd\x76\xcc\x40\x7c\xf5\xf0\x65\x7c\xff\x79\xf1\x03\x69\x34\xff\xcd\xc3\x97\x04\x27\x87\x34\x78\x1b\x1a\x49\xad\x1f\x44\x68\x7b\x42\xb5\x74\xff\x50\x38\x58\x0b\x29\x81\x17\xc8\x97\xdb\xab\x84\x2d\x4c\xa9\x7b\x1f\xfd\x9f\x1d\xa1\xe9\x38\xb7\x13\xbd\x1d\xa7\xad\x85\x78\x2f\x9c\x25\x16\x30\x1b\xdd\x4c\xe7\x6f\x47\xe3\x9f\x4e\xeb\xc9\x31\x1b\xdd\xcc\x87\xd3\xb7\x70\x58\x73\x0d\x83\x31\xde\x23\xf7\x34\xe8\x84\xdb\x37\x2f\xf5\xf9\x67\x21\x25\xdb\x27\xfe\xb6\xd0\xeb\xbb\xd4\xe7\x7d\x9e\x8b\xff\x12\xd9\xe5\x33\x3a\x4a\x9f\xfd\xd2\x99\xcd\x27\xef\x66\xa3\x9b\xf1\xe0\x76\x4f\x1f\x45\x6d\x6d\x58\xb5\xb5\x29\x5c\x5a\xd1\x49\x26\xdc\xae\x30\x09\xa8\x9c\xd9\x54\x5a\xd0\x29\xd6\x22\x42\xb5\xcc\x93\xd4\x0b\x59\x9f\xa2\x0a\xbd\xde\x9e\x7d\xc3\x35\x49\x4d\x6e\x04\x0f\xd3\x3a\xbc\xf9\xc3\x5b\x07\x12\x9d\x05\x6f\x69\x04\x82\xaf\x6a\x72\x44\xe7\x8f\xdc\x42\x8a\x0b\x6d\xea\x14\x08\xe5\x69\xdc\xe9\x30\xba\x1b\x8b\xc8\xc0\x42\x48\x84\xca\x60\xa0\xcd\x61\x80\x32\xb7\xb5\x58\x58\x78\x37\xba\x7e\xd6\xe9\x6e\x0d\x5a\x23\x48\x5c\x21\x55\x76\x30\x61\x67\x78\x73\xbb\x53\x1f\x9c\xff\x03\xd1\xce\xb9\x64\xf7\x35\xea\x41\xf4\xe8\x70\x1c\xc1\xef\x9d\x2e\x7c\xc4\x40\xfb\x76\x08\xd3\x34\x65\x49\x79\x7b\xfe\x24\x2c\xad\x98\x11\x3a\xb8\xda\x9e\x45\x5b\x82\x43\x6d\x45\xa2\xeb\x01\x3a\xde\x3f\xda\xf2\x9c\x36\x7e\x4f\xb5\x92\x9b\xa7\xed\xe1\x34\x70\x86\x70\xf7\xd3\x0b\x62\x77\xf6\x05\x4a\xb4\x42\x63\x44\x96\x11\xf3\x74\xa4\xda\x89\x12\x3b\xc3\xf1\x7c\xfa\xe9\xdd\x64\x34\x9e\x93\x73\x8f\x7c\x78\xe4\xa0\xa5\x67\xc4\xac\xc9\x37\xaa\x9d\x02\xdb\x22\xc9\x0d\xab\x0a\x28\x29\x6f\x29\x02\x83\x95\x96\x9e\xf2\xa5\x81\xad\xb4\xc8\x82\x72\xc9\x36\x94\xa7\xe6\xeb\xd6\x17\x3a\xb1\x36\x77\x62\x92\x85\xfd\x9c\xd1\xf1\x98\x17\x4c\xe5\x94\xba\xad\xb4\x00\x34\x06\xd7\x41\x65\xb8\x44\x25\x85\x9d\x2e\x68\xce\xbd\x69\x51\x91\xe1\x42\x04\x0a\x24\x5c\x73\x15\x78\xf1\x43\xce\x8c\xa4\x01\x93\xed\x5d\x58\x0d\x53\x34\x49\xb7\x56\xd9\xf9\x30\xb9\x7d\xff\x76\x18\x42\xb3\x62\x26\x9c\x1e\xea\xed\x4d\x08\xbe\x37\x66\x88\xc1\x05\x53\xdb\xa4\xbf\x1d\x5c\x11\xdb\x08\xf7\x94\xcc\x5a\x91\x2b\x4a\xd4\x5e\x4d\xe6\xc2\x15\x3e\xad\x4b\xf1\xc1\xd9\x24\x4b\x84\xb5\x1e\x6d\x72\x7a\xfa\xcb\xf3\x6e\xf8\x4e\x53\x1d\x95\x8b\x4f\xce\xcf\xcf\xcf\x4f\x4e\xcf\xce\xfe\xa1\x9c\xd3\xd3\x17\x27\x67\xe7\xcf\xcf\x4f\x3b\xff\x13\x00\x00\xff\xff\x56\xd4\x5e\xeb\x1b\x17\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseCleanInstall = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x51\x6f\xdb\x36\x14\x85\xdf\xf9\x2b\xce\xac\x62\xd8\x86\x48\x4a\xf3\x32\x60\xc5\x86\x79\x49\x86\x19\x2d\x6c\x20\x76\x57\x14\xdb\x1e\xae\xa8\x2b\xe9\x22\x12\xc9\x91\x57\x75\xfc\xef\x07\x2a\x71\x50\x63\x7e\x32\x75\x0e\x79\x3e\x1e\xde\xe2\x9b\xba\x11\x57\xa7\xc1\x98\x02\xb7\x3e\x9c\xa2\xf4\x83\xe2\xe6\xfa\xed\x8f\x38\x0c\x8c\xf7\x73\xc3\xd1\xb1\x72\xc2\x7a\xd6\xc1\xc7\x54\x99\xc2\x14\xf8\x20\x96\x5d\xe2\x16\xb3\x6b\x39\x42\x07\xc6\x3a\x90\x1d\xf8\xac\x5c\xe1\x4f\x8e\x49\xbc\xc3\x4d\x75\x8d\xef\xb2\x61\xf5\x22\xad\xbe\x7f\x67\x0a\x9c\xfc\x8c\x89\x4e\x70\x5e\x31\x27\x86\x0e\x92\xd0\xc9\xc8\xe0\x27\xcb\x41\x21\x0e\xd6\x4f\x61\x14\x72\x96\x71\x14\x1d\x96\x98\x97\x43\x2a\x53\xe0\xf3\xcb\x11\xbe\x51\x12\x07\x82\xf5\xe1\x04\xdf\x7d\xed\x03\xe9\x02\x9c\x7f\x83\x6a\xf8\xa9\xae\x8f\xc7\x63\x45\x0b\x6c\xe5\x63\x5f\x8f\xcf\xc6\x54\x7f\xd8\xdc\xde\x6f\xf7\xf7\xe5\x4d\x75\xbd\x6c\xf9\xe8\x46\x4e\x09\x91\xff\x9d\x25\x72\x8b\xe6\x04\x0a\x61\x14\x4b\xcd\xc8\x18\xe9\x08\x1f\x41\x7d\x64\x6e\xa1\x3e\xf3\x1e\xa3\xa8\xb8\xfe\x0a\xc9\x77\x7a\xa4\xc8\xa6\x40\x2b\x49\xa3\x34\xb3\x5e\x94\x75\xa6\x93\x74\x61\xf0\x0e\xe4\xb0\x5a\xef\xb1\xd9\xaf\xf0\xdb\x7a\xbf\xd9\x5f\x99\x02\x9f\x36\x87\x3f\x76\x1f\x0f\xf8\xb4\x7e\x78\x58\x6f\x0f\x9b\xfb\x3d\x76\x0f\xb8\xdd\x6d\xef\x36\x87\xcd\x6e\xbb\xc7\xee\x77\xac\xb7\x9f\xf1\x7e\xb3\xbd\xbb\x02\x8b\x0e\x1c\xc1\x4f\x21\x66\x7e\x1f\x21\xb9\x46\x6e\x73\x67\x7b\xe6\x0b\x80\xce\x3f\x03\xa5\xc0\x56\x3a\xb1\x18\xc9\xf5\x33\xf5\x8c\xde\x7f\xe1\xe8\xc4\xf5\x08\x1c\x27\x49\xf9\x31\x13\xc8\xb5\xa6\xc0\x28\x93\x28\xe9\xf2\xe5\x7f\x97\xaa\xf2\x2c\xad\x91\x6c\x94\xa0\x60\x67\x29\xa4\x79\xa4\xdc\xcc\xf2\x46\xd3\xe4\x1d\xee\xbc\x7d\xe4\x28\x53\x4e\x0a\xa4\xca\xd1\x2d\x2c\xe2\x92\xd2\x38\x2e\xb1\x64\x1f\xa9\xe7\x64\x8a\x9c\x9a\x13\x1c\xec\xc8\xb4\x30\xcd\x61\x89\x9c\x9d\x63\xcb\x29\x51\x3c\x9d\xb7\x82\xa2\x4a\x47\x56\xf3\xa8\x82\xab\xbe\x7a\xde\x55\x9e\x75\x09\x9a\x5f\x30\x81\x9b\x97\x3f\xd6\x3b\xa7\x91\xec\xa3\x31\x89\x15\xa5\x07\xc7\xc8\x4f\xa2\xc6\x48\x87\xbf\xf0\xa6\xc0\xcf\xb8\xc6\x3f\xef\x16\x08\x03\xb0\x1d\x3c\x7e\xf9\xf6\x06\xab\xad\x7f\xe5\x3c\x77\xc8\xed\x2a\x5b\x9e\x44\xf1\xd6\x74\x62\x0c\x05\x2d\x7b\x56\xcc\xa1\x25\xe5\xd7\xe5\x99\xa7\x3c\xa1\x2c\x9d\x3f\xf3\x95\x91\x73\x47\xec\xda\x84\x37\xbf\xbe\xba\x97\x3b\xa0\x3c\x99\x38\xa1\x8c\x1d\xfe\x36\x00\xea\x2f\x14\x6b\x9b\x47\xb9\x6e\xb9\xb1\xde\x75\xf5\x0f\x5f\x29\xa3\x34\x35\x05\xad\x47\x49\x9a\x2e\x15\xdf\xbf\xae\x75\x0a\x17\xda\xb2\x36\xff\x05\x00\x00\xff\xff\xdd\xdb\xd0\x5d\x1a\x04\x00\x00")

func imagesBaseCleanInstallBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseCleanInstall,
		"images/base/clean-install",
	)
}

func imagesBaseCleanInstall() (*asset, error) {
	bytes, err := imagesBaseCleanInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/clean-install", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":         imagesBaseDockerfile,
	"images/base/clean-install":      imagesBaseCleanInstall,
	"images/base/entrypoint/main.go": imagesBaseEntrypointMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile":    {imagesBaseDockerfile, map[string]*bintree{}},
			"clean-install": {imagesBaseCleanInstall, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
