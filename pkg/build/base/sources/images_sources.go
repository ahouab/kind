// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/clean-install
// ../../../../images/base/entrypoint/main.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7b\x6f\xdb\xb8\x96\xff\xdf\x9f\xe2\x40\x0e\xee\x24\x1d\x4b\xca\x63\x32\x93\xe6\x22\xb3\x70\x1d\x37\xd7\x68\x6a\x17\xb6\xdb\xa2\xd8\x5d\x04\x94\x74\x2c\x71\x4c\x91\x5a\x3e\xec\xb8\xbd\xf9\xee\x8b\x43\x49\x7e\xa4\xe9\xec\xc5\xce\xee\x60\x80\xc6\x22\x79\x9e\xbf\x73\xce\x8f\xec\xc2\x40\x55\x1b\xcd\xf3\xc2\xc2\xf9\xe9\xd9\x15\xcc\x0b\x84\x77\x2e\x41\x2d\xd1\xa2\x81\xbe\xb3\x85\xd2\x26\xea\x74\x3b\x5d\xb8\xe7\x29\x4a\x83\x19\x38\x99\xa1\x06\x5b\x20\xf4\x2b\x96\x16\xd8\xae\xf4\xe0\x13\x6a\xc3\x95\x84\xf3\xe8\x14\x8e\x69\x43\xd0\x2c\x05\x27\x7f\xef\x74\x61\xa3\x1c\x94\x6c\x03\x52\x59\x70\x06\xc1\x16\xdc\xc0\x82\x0b\x04\x7c\x4c\xb1\xb2\xc0\x25\xa4\xaa\xac\x04\x67\x32\x45\x58\x73\x5b\x78\x35\x8d\x90\xa8\xd3\x85\x2f\x8d\x08\x95\x58\xc6\x25\x30\x48\x55\xb5\x01\xb5\xd8\xdf\x07\xcc\x7a\x83\xe9\xbf\xc2\xda\xea\x3a\x8e\xd7\xeb\x75\xc4\xbc\xb1\x91\xd2\x79\x2c\xea\x8d\x26\xbe\x1f\x0d\x86\xe3\xd9\x30\x3c\x8f\x4e\xfd\x91\x8f\x52\xa0\x31\xa0\xf1\xbf\x1c\xd7\x98\x41\xb2\x01\x56\x55\x82\xa7\x2c\x11\x08\x82\xad\x41\x69\x60\xb9\x46\xcc\xc0\x2a\xb2\x77\xad\xb9\xe5\x32\xef\x81\x51\x0b\xbb\x66\x1a\x3b\x5d\xc8\xb8\xb1\x9a\x27\xce\x1e\x04\xab\xb5\x8e\x9b\x83\x0d\x4a\x02\x93\x10\xf4\x67\x30\x9a\x05\xf0\xa6\x3f\x1b\xcd\x7a\x9d\x2e\x7c\x1e\xcd\xff\x31\xf9\x38\x87\xcf\xfd\xe9\xb4\x3f\x9e\x8f\x86\x33\x98\x4c\x61\x30\x19\xdf\x8e\xe6\xa3\xc9\x78\x06\x93\xb7\xd0\x1f\x7f\x81\x77\xa3\xf1\x6d\x0f\x90\xdb\x02\x35\xe0\x63\xa5\xc9\x7e\xa5\x81\x53\x18\x31\xa3\x98\xcd\x10\x0f\x0c\x58\xa8\xda\x20\x53\x61\xca\x17\x3c\x05\xc1\x64\xee\x58\x8e\x90\xab\x15\x6a\xc9\x65\x0e\x15\xea\x92\x1b\x4a\xa6\x01\x26\xb3\x4e\x17\x04\x2f\xb9\x65\xd6\x7f\xf9\xce\xa9\xa8\xd3\xe9\xc2\x92\xcb\x0c\x52\xe1\x8c\x45\x0d\x09\x23\x57\x4b\x96\x63\x0f\x12\xc7\x85\x25\x47\x5d\xe2\xa4\x75\xd7\x67\x57\xd1\xe9\x2f\x3e\xde\x73\x55\x83\x60\x8d\xc0\xb2\x0c\xcc\xc6\x58\x2c\xb3\x1e\x0c\xc6\xa3\x1e\xe9\x05\xe5\xfd\xb2\x4a\x09\x03\x12\x31\xab\xe3\xae\x9d\xf4\x30\x65\x59\xe9\xc5\xbc\x55\xba\x3d\x0b\x3f\x43\xa6\xd2\x25\x6a\x48\x95\x5c\xf0\xdc\x69\x6f\x33\xe1\x2d\x83\x04\x85\x5a\xf7\xc0\x34\x01\x59\x28\x21\xd4\x9a\xdc\xd5\xb8\x40\x8d\x32\x45\x73\xdd\xe9\x7a\xd0\x98\x06\x35\x0b\xca\x35\x9a\xa5\x55\x95\x87\xce\x9a\x2f\x79\x3c\x6b\x72\x1d\x37\x4a\xe3\x81\x92\x84\x47\xd4\x23\x69\x51\x2f\x58\x8a\xf1\x9e\x9c\x0c\x57\x28\x54\x85\xda\x44\x1a\xb3\x82\xd9\x28\x55\x65\x9c\x08\x95\xc7\xe7\xa7\x67\xbf\xc4\xa7\x97\xf4\xbf\x76\x92\x42\x1f\x36\x32\x43\x82\x3f\x97\x61\xed\x4d\x98\xb6\x1a\xfe\x75\xc1\xbf\xc6\xa7\xaf\xe3\xb3\x8b\xef\x04\x73\x19\xb2\x50\x2a\x19\x56\x9a\xaf\xb8\xc0\x1c\xb3\x7d\xf1\x9d\xfe\xf4\x8e\x70\x38\x7c\x18\xbd\xef\xdf\x0d\x6f\x82\xfd\xac\x05\x9d\xb7\xd3\xc9\x7b\x38\xfa\xb6\xdb\xf0\x44\xb9\x37\x68\xa9\x0c\xe0\x76\xf8\x66\xd4\x1f\x3f\xbc\x9d\x4e\xc6\xf3\xe1\xf8\xf6\x46\x2a\xc9\x29\x24\x2c\xb5\x7c\x85\x60\xac\xaa\x0c\x18\x55\x22\xb0\xca\xc2\x9a\x79\xb4\x99\x5e\x8d\x02\x6e\x7c\x6b\xe8\x74\x81\x81\x46\x26\x80\xe9\xdc\x95\x28\x6d\x0f\xd6\xf8\x93\x46\x38\x66\xc9\x89\x33\xa4\x87\x6c\xb4\x0a\x72\xb4\xc0\xc0\x62\x59\x29\xcd\xf4\x06\x86\xe3\x4f\xc0\x72\xc6\x65\xe4\xbd\xf8\x73\x6b\x3a\x9d\xc1\xe4\xc3\x17\x48\x05\x32\x19\x72\x69\x2c\x13\x02\x62\x67\x74\x2c\x54\xca\x44\x9c\x70\x19\x1f\x2c\x76\xa6\x1f\xc7\x90\x16\xa5\xca\xe0\xe7\xc7\x3f\xdf\xd9\xe9\xc2\x1d\x5a\xc8\xb0\x42\x99\xa1\x4c\x39\x1a\x82\x7b\x81\x7b\x85\x01\x4c\x68\x64\xd9\x06\x0a\x66\xae\xc1\x98\xa2\x47\x41\xe9\x81\x91\xac\xca\xfc\xee\x3a\x26\x89\x56\x4b\x94\x90\xa9\xb5\x04\x2e\xad\x82\x63\x64\x69\xe1\x1b\x07\x08\x2e\xf1\x84\x30\x1b\x42\xc5\xd2\x25\xcb\x91\xea\x24\x45\x63\x28\x1c\x54\xe9\x8d\x45\x14\xb4\x1a\x4a\xcf\x37\xef\x17\x95\x41\xbd\xe2\x29\x1a\x38\x6e\xc0\x72\xf2\xe2\x6e\x92\xdb\x54\x59\x0c\xc5\xa6\x42\xbd\x74\x09\x42\x0c\xcb\xdd\xec\xa0\x46\xae\x24\x4a\x6b\xbc\x88\x92\x9b\x74\x27\xe7\xd8\x59\x2e\xb8\xe5\xe8\x4b\x9f\x66\x01\x97\xa0\x9c\x06\xf2\x91\xaa\x9d\xcb\xfc\xa4\x0e\x98\xa4\x1d\x3e\xb8\xae\x82\x63\x8d\xa5\x5a\x91\x2f\x4e\xae\x99\xa4\xfe\xd9\xd6\x7d\x6b\x3a\x1d\x7b\xcb\x25\x13\x62\x43\x27\x33\x6e\x7c\xef\x5e\x96\x26\x27\x25\x7f\x28\xa7\x25\x13\xd9\xff\x5f\x79\x7a\x90\x1c\x60\xea\x3f\x3a\x7e\x16\x51\x76\x43\xab\x99\x34\x95\xd2\x36\xf4\xea\x21\x65\x61\x8a\xda\x52\x1f\x66\x3e\x6c\x4e\x8b\xed\x2c\x09\x2b\x4d\x76\x51\x9c\xc2\x54\x95\xa5\x92\x90\x4b\x57\xe5\xe7\x20\x4c\x12\x6a\x14\x48\x60\x6a\xc5\x6f\x23\xd1\x58\x68\x36\x66\x05\x82\x27\xcd\xef\xd3\xed\xc6\x54\x49\x69\x35\x4b\x97\xc0\x2b\x4b\xd1\x31\xc0\x2b\xad\x9c\xc5\x73\x40\x5b\x50\xfc\xc1\xa8\x94\x59\xa0\x34\x85\x82\x4b\xf7\x08\xa5\x72\xd2\x02\x26\xcd\x01\x97\xe1\x0a\x96\x54\x0a\xcc\x2d\x4c\x58\x77\xe8\x56\x41\xc2\x4c\x01\xda\x6c\x64\xda\x7c\xfa\xdb\xdf\x60\x41\xd3\x21\x16\x3c\xd9\x36\xcd\xfa\x5f\xfa\x87\x4b\x6e\x23\xcb\x74\x8e\x36\xa2\xb4\x9a\x18\x42\xc9\x4a\x84\xa0\xf5\xc5\x96\x15\x11\x05\x13\x1a\xb4\xae\x8a\x9a\x64\x07\x10\x66\x28\xd0\xe2\x4e\x8d\x2e\x21\x5c\xbc\xa8\xa7\x74\xc2\xf2\xd0\x19\xd4\x87\xaa\x5e\x7d\x77\x18\x6d\xfa\xfc\xf0\xab\x1f\x6e\x7e\x41\x93\x6f\x0a\xe1\xc2\xfc\x4f\x7a\x5e\x0a\x06\xc1\xc9\x3e\x3f\x49\xc1\xfe\x0b\xc7\x29\xbc\xa9\x15\xff\x92\x84\x84\x19\x9e\xfe\xd0\x70\x4c\x0b\x05\xc1\x14\x59\xf6\xee\xbd\xc9\x6f\xa4\x0a\xe0\xf7\xdf\x0f\x03\xd6\x16\x58\x44\xf3\x97\xfa\xe0\xa8\xa9\x82\xba\x52\x7a\xb0\x2e\x78\x5a\xf8\x4e\x62\xa8\xed\x14\xac\xaa\x50\x02\x5b\x10\x6b\x58\x63\xdb\xaf\xea\x21\xd1\x10\xbb\x6d\xdf\x60\x89\x5a\x11\xc3\xa2\x26\xea\xa9\xd3\xb6\x86\x55\x6a\xa2\x5a\x83\xaf\xde\x46\x4a\xec\xb1\x1b\xb7\x45\x8a\x71\x3d\xcb\xe2\xae\x41\x1b\xba\x2a\xb4\x05\x86\x1a\x2b\x65\xb8\x55\x7a\x43\x83\x47\x66\x5b\x99\xbb\x66\x16\x71\xe5\x35\xc4\x1e\x7d\x31\x97\x6d\x5f\xb7\xad\xa2\x70\x59\xd3\x91\xb8\xbb\xeb\xb7\xe1\x5e\xbf\xa5\x41\x55\xff\xfc\xc9\xc0\xdd\x87\x3b\x58\xe2\xc6\x2f\x10\xed\xf1\x5c\x84\xcb\x1c\x75\xa5\xb9\xb4\x07\xdf\x0f\xac\x0b\xc1\x55\x19\xb3\x58\xcf\x09\xfe\x2c\xb0\x4d\x93\xec\x74\x61\x3c\x99\x0f\xaf\x81\x06\xf6\x6b\x1a\x20\x6a\xb1\xe0\x29\xf7\x1d\xd1\xb8\x8a\x9a\x4f\x4d\x6d\xf7\x98\x7e\xea\xb4\x46\x69\xc5\x86\x88\x2c\xa5\xa1\xe2\xd4\x88\xc1\x52\x3b\xdc\xeb\x95\x2f\xc4\xc4\x32\xb3\x34\xb1\x6f\x00\xdf\x45\xa3\x9e\xc2\x93\xc1\xbb\xe1\xf4\xe1\xd3\x70\x3a\x1b\x4d\xc6\x37\xc1\xa5\xa7\x12\xaf\xa3\x57\x81\x0f\x78\x43\xf1\xb6\x33\x1c\xe5\xaa\xe7\x79\xc0\x33\x12\x10\x6d\x49\x86\x27\x0b\x56\x01\x03\x62\x31\x5f\x51\x2b\x58\x31\xe1\x08\x18\x86\x0b\x4f\xe3\x1a\x5a\x59\xf3\x0b\x58\x68\x55\xfa\xee\xbb\xc4\x0d\x0d\xcb\xe0\x73\xbd\x70\xdd\x7e\x04\xe5\x6c\xe5\x2c\x98\x42\x39\x91\x79\xed\x09\xc1\x4e\x13\xcc\x8e\x8d\xcd\x94\xb3\x2d\x3d\x21\xbe\xa1\x4b\x9a\x30\x27\x81\xf7\xaf\xff\x61\xfe\xf0\x6e\xf8\xe5\xe1\x76\x32\x9e\x3f\x7c\xee\x4f\xc7\x0f\x93\xf1\xc3\x6d\x7f\x7c\x37\x9c\x4e\x3e\xce\x1e\x3e\xce\x3c\x8b\x5a\x30\x61\x30\xa8\xa7\x03\xf5\xf8\x70\x61\x66\xf7\x10\xec\x00\xbc\x96\x42\xb1\x6c\x1f\xc4\x35\x78\x8f\x8e\xa3\xba\xc2\x94\x69\x5b\xfe\xdf\x9b\x42\x3c\x1a\xdd\x06\x27\x71\x5e\xe5\x01\xfc\x73\xeb\x0a\x21\x27\xdc\x95\x6c\xfb\x79\x0f\x60\x70\x3a\x7c\xf3\x76\x70\x7b\x75\xb5\xb7\x2b\xcb\x42\xda\xb9\x83\xdb\xb6\x99\x03\x04\x19\x26\xf0\xd7\x0d\x85\xa3\x63\x61\x92\x87\x76\x6c\x85\xa9\x39\x01\xe3\xc7\x49\xb0\x33\xe4\x70\x72\x06\xdb\xca\xbd\x39\xfa\x76\x88\xa3\xa7\x80\x9a\xcb\x50\xfa\xe9\x3e\x98\x8e\x3c\x29\xd9\x8e\xe1\xcc\x07\xba\x5c\x66\x5c\x43\x58\xd5\x66\x35\x8c\xa5\x6d\x63\x3f\x7d\x0b\x52\xcd\x77\x93\x3b\x0b\xae\xc1\x6a\x87\x4f\x3f\xc1\xef\xfb\x07\xe2\x8c\x61\xa9\x64\xf4\x87\x51\xf2\x05\xa9\xbb\xf3\xde\xfc\xdd\xaf\xfa\xfe\x01\x19\x2e\x98\x13\xb6\x95\xb9\xdb\x10\xd7\x1b\x22\xab\xca\x9a\x59\x12\xd6\x42\x0e\x81\x89\xe9\x1a\x26\xd8\x66\x61\x62\xc9\x88\xa9\xc6\xc1\x9f\x1e\xde\x6b\xb2\x83\xf1\x08\x12\x2e\x99\x26\x6a\x65\x15\xc4\xaa\xb2\x71\x2a\x39\x51\x54\xe2\x53\x93\xdb\xc9\x71\x82\xd2\x16\x88\x22\x43\x7d\x72\x4d\xdd\x03\xd6\xc5\x06\x62\x58\x17\xcc\x42\x81\x1a\x3d\xaa\x07\xe3\xd1\xae\x64\x4f\xa3\xdf\xa2\xcb\x60\xfb\xdd\x93\xff\x8f\xd3\xfb\x9b\x2d\x7c\x8d\x55\x9a\xe5\x18\xe5\x4a\xe5\x02\x59\xc5\x8d\x07\xc6\xae\x5d\xb4\x88\x88\x25\xda\xb5\xd2\xcb\xb0\x12\x2e\xe7\xd2\xc4\x75\x49\xe0\x23\xb5\x25\xe8\x4f\x07\xff\xb8\x39\x3a\xce\xaa\x65\x0e\x61\xe8\xc1\x1a\x32\x9d\x16\xdc\x62\x6a\x9d\xc6\x93\xbd\x51\x54\x9f\x20\x73\xe6\xfd\xe9\x9b\xfe\xfd\xfd\x4d\x90\x4a\xde\xca\x0d\x8f\xbe\x91\xb0\xa7\x70\x75\xf4\x6d\xcf\x95\xa7\xc8\xe6\x5f\x83\x17\xa5\x78\x7f\xea\xcd\xad\x7f\x4f\xf5\xcf\x46\xfe\xd3\x3e\x4c\x7d\x09\x53\x05\x87\xa1\x46\xab\x37\x70\x09\x61\xd8\x74\x91\xd8\x96\x15\x05\x9d\x74\x41\x23\x92\xa4\xed\x9d\x37\x05\x3b\xbf\xfc\xd5\xb8\xf2\x70\xf3\x76\x7d\x87\xb1\xbd\x04\xee\x96\x2d\xd3\x10\x0e\x0e\x17\xc3\xc7\xaf\x8b\x1f\x48\xa3\x71\xaf\x0f\x17\xf7\x41\x93\x6a\x9e\x5a\xe1\xe1\x72\x70\xa7\xa9\xf3\x3d\x1d\x0d\xe6\xf7\x3b\x28\xac\xce\xa2\xb3\x8b\xe8\xf4\x7f\x9b\xb6\xa6\xf7\xed\xb7\xbe\x9c\xdb\xc2\x25\xcf\xf1\x62\x78\x6e\x62\x2a\xd0\x7a\xb2\x34\xf0\x31\xdb\xfe\x13\x1f\x7d\x3b\x34\xed\x29\xae\xfd\x08\xbf\x5b\xa8\x19\x6c\x8b\x08\x22\x37\x11\x81\xe0\x9f\x3e\x8c\x8f\x5f\x07\xcf\xdd\xee\x74\xc1\x22\x51\x90\x86\x50\xd3\x10\x04\xee\x07\x00\x97\xed\xc5\xe7\x98\x5b\x58\x73\x8a\x5e\x81\xe9\x72\xfb\xa8\xb2\x2d\x51\x9a\x63\x27\xff\x67\x8f\x09\x74\xb1\xdd\x89\xde\x12\x8b\xd6\x42\x7c\xe4\xd6\x10\x1f\x9a\x8d\xee\xa6\xf3\xf7\xa3\xf1\xcf\x17\xf5\x0c\x9d\x8d\xee\xe6\xc3\xe9\x7b\x38\xae\x59\x97\xc6\x10\x1f\x31\x75\x34\xf2\xb9\xdd\x37\x2f\x71\xf9\x57\x2e\x04\xdb\xbf\x02\x99\x42\xad\x1f\x12\x97\x47\x69\xce\xff\x8d\x67\x37\x67\xe7\xa7\x67\xbf\x5e\xfe\xd6\x99\xcd\x27\x1f\x66\xa3\xbb\x71\xff\x7e\x4f\x1f\x45\x6d\xad\x59\xb5\xb5\xc9\x3f\xdf\xd1\x9d\xce\xbf\x33\x31\x01\x28\xad\xde\x54\x8a\xd3\x7d\xde\x20\x42\xb5\xcc\xe3\xc4\x71\x51\xdf\x27\x0b\xb5\xde\xbe\x02\xf8\x07\xa3\x9a\xe6\xf1\xd4\xf3\x16\xbf\xf2\x87\x33\x16\x04\x5a\x03\xce\x10\x19\x00\x57\xd5\x34\x91\x6e\x62\xb9\x81\x04\x17\x4a\xd7\x29\xe0\xd2\xd1\xe0\x57\x9e\xc4\x34\x16\x91\x81\x05\x17\x08\x95\x46\x7f\x81\xf0\x54\x82\xd9\xad\xc5\xdc\xc0\x87\xd1\xed\x59\xa7\xbb\x35\x68\x8d\x20\x70\x85\xd4\xda\xbc\x09\x3b\xc3\x9b\x77\xae\xfa\x09\xe1\xdf\x21\xd8\x39\x17\xef\xfe\x0c\x7a\x10\x3c\x7b\x26\x08\xe0\x3f\x3b\x5d\xf8\x8c\x9e\x00\xef\x10\xa6\x88\x6f\x90\xf2\xf6\x26\x4e\x58\x5a\x31\xcd\x95\x77\xb5\xbd\x95\xb7\x54\x8f\xea\x44\xa0\xed\x01\xda\x34\x3a\xd9\x32\xbe\x36\x7e\xaf\x94\x14\x9b\x57\xed\x35\xdd\xb3\x27\xff\x0a\xd6\xf3\x62\x77\xf6\x79\x72\xb8\x42\xad\x79\x96\x11\x07\xb7\xa4\xda\xf2\x12\x3b\xc3\xf1\x7c\xfa\xe5\xc3\x64\x34\x9e\x93\x73\xcf\x7c\x78\xe6\xa0\xa1\x6f\x74\xc7\x20\xdf\xa8\x76\x0a\x6c\x8b\x24\xd7\xac\x2a\xa0\xa4\xbc\x25\x08\x0c\x56\x4a\x38\xca\x97\x02\xb6\x52\x3c\x83\x66\xd0\x51\x9e\x9a\x3f\xb7\xbe\xd0\xdd\xbd\x79\x1d\x14\xcc\x9f\x4f\x99\x33\x08\x69\xc1\x64\x4e\xa9\xdb\x4a\xf3\x40\x63\x70\xeb\x55\xfa\xe7\x64\x52\xd8\xe9\x82\x4a\x53\xa7\x5b\x54\x64\xb8\xe0\x9e\x0c\x72\xdb\x3c\x8a\x5e\xff\xf0\xf6\x80\xa4\x01\xe3\xed\xab\x60\x0d\x53\xd4\x71\xb7\x56\xd9\xf9\x34\xb9\xff\xf8\x7e\xe8\x43\xb3\x62\xda\xdf\xa3\xea\xe3\x4d\x08\x5e\x9a\xb3\xc4\x65\xbd\xa9\x6d\xd2\xdf\xf7\x07\xc4\xbb\xfc\x8b\x2d\x33\x86\xe7\x92\x12\xb5\x57\x93\x7b\x8d\xf1\xf0\x96\x96\xc5\xdc\x18\x87\x26\xbe\xb8\xf8\xed\x97\xae\xff\x3b\x55\x25\x9d\x0e\xcf\xaf\xae\xae\xae\xce\x2f\x2e\x2f\xff\xa2\x9c\x8b\x8b\xd7\xe7\x97\x57\xbf\x5c\x5d\x74\xfe\x3b\x00\x00\xff\xff\xa1\x7f\x25\x04\x25\x18\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseCleanInstall = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x51\x6f\xdb\x36\x14\x85\xdf\xf9\x2b\xce\xac\x62\xd8\x86\x48\x4a\xf3\x32\x60\xc5\x86\x79\x49\x86\x19\x2d\x6c\x20\x76\x57\x14\xdb\x1e\xae\xa8\x2b\xe9\x22\x12\xc9\x91\x57\x75\xfc\xef\x07\x2a\x71\x50\x63\x7e\x32\x75\x0e\x79\x3e\x1e\xde\xe2\x9b\xba\x11\x57\xa7\xc1\x98\x02\xb7\x3e\x9c\xa2\xf4\x83\xe2\xe6\xfa\xed\x8f\x38\x0c\x8c\xf7\x73\xc3\xd1\xb1\x72\xc2\x7a\xd6\xc1\xc7\x54\x99\xc2\x14\xf8\x20\x96\x5d\xe2\x16\xb3\x6b\x39\x42\x07\xc6\x3a\x90\x1d\xf8\xac\x5c\xe1\x4f\x8e\x49\xbc\xc3\x4d\x75\x8d\xef\xb2\x61\xf5\x22\xad\xbe\x7f\x67\x0a\x9c\xfc\x8c\x89\x4e\x70\x5e\x31\x27\x86\x0e\x92\xd0\xc9\xc8\xe0\x27\xcb\x41\x21\x0e\xd6\x4f\x61\x14\x72\x96\x71\x14\x1d\x96\x98\x97\x43\x2a\x53\xe0\xf3\xcb\x11\xbe\x51\x12\x07\x82\xf5\xe1\x04\xdf\x7d\xed\x03\xe9\x02\x9c\x7f\x83\x6a\xf8\xa9\xae\x8f\xc7\x63\x45\x0b\x6c\xe5\x63\x5f\x8f\xcf\xc6\x54\x7f\xd8\xdc\xde\x6f\xf7\xf7\xe5\x4d\x75\xbd\x6c\xf9\xe8\x46\x4e\x09\x91\xff\x9d\x25\x72\x8b\xe6\x04\x0a\x61\x14\x4b\xcd\xc8\x18\xe9\x08\x1f\x41\x7d\x64\x6e\xa1\x3e\xf3\x1e\xa3\xa8\xb8\xfe\x0a\xc9\x77\x7a\xa4\xc8\xa6\x40\x2b\x49\xa3\x34\xb3\x5e\x94\x75\xa6\x93\x74\x61\xf0\x0e\xe4\xb0\x5a\xef\xb1\xd9\xaf\xf0\xdb\x7a\xbf\xd9\x5f\x99\x02\x9f\x36\x87\x3f\x76\x1f\x0f\xf8\xb4\x7e\x78\x58\x6f\x0f\x9b\xfb\x3d\x76\x0f\xb8\xdd\x6d\xef\x36\x87\xcd\x6e\xbb\xc7\xee\x77\xac\xb7\x9f\xf1\x7e\xb3\xbd\xbb\x02\x8b\x0e\x1c\xc1\x4f\x21\x66\x7e\x1f\x21\xb9\x46\x6e\x73\x67\x7b\xe6\x0b\x80\xce\x3f\x03\xa5\xc0\x56\x3a\xb1\x18\xc9\xf5\x33\xf5\x8c\xde\x7f\xe1\xe8\xc4\xf5\x08\x1c\x27\x49\xf9\x31\x13\xc8\xb5\xa6\xc0\x28\x93\x28\xe9\xf2\xe5\x7f\x97\xaa\xf2\x2c\xad\x91\x6c\x94\xa0\x60\x67\x29\xa4\x79\xa4\xdc\xcc\xf2\x46\xd3\xe4\x1d\xee\xbc\x7d\xe4\x28\x53\x4e\x0a\xa4\xca\xd1\x2d\x2c\xe2\x92\xd2\x38\x2e\xb1\x64\x1f\xa9\xe7\x64\x8a\x9c\x9a\x13\x1c\xec\xc8\xb4\x30\xcd\x61\x89\x9c\x9d\x63\xcb\x29\x51\x3c\x9d\xb7\x82\xa2\x4a\x47\x56\xf3\xa8\x82\xab\xbe\x7a\xde\x55\x9e\x75\x09\x9a\x5f\x30\x81\x9b\x97\x3f\xd6\x3b\xa7\x91\xec\xa3\x31\x89\x15\xa5\x07\xc7\xc8\x4f\xa2\xc6\x48\x87\xbf\xf0\xa6\xc0\xcf\xb8\xc6\x3f\xef\x16\x08\x03\xb0\x1d\x3c\x7e\xf9\xf6\x06\xab\xad\x7f\xe5\x3c\x77\xc8\xed\x2a\x5b\x9e\x44\xf1\xd6\x74\x62\x0c\x05\x2d\x7b\x56\xcc\xa1\x25\xe5\xd7\xe5\x99\xa7\x3c\xa1\x2c\x9d\x3f\xf3\x95\x91\x73\x47\xec\xda\x84\x37\xbf\xbe\xba\x97\x3b\xa0\x3c\x99\x38\xa1\x8c\x1d\xfe\x36\x00\xea\x2f\x14\x6b\x9b\x47\xb9\x6e\xb9\xb1\xde\x75\xf5\x0f\x5f\x29\xa3\x34\x35\x05\xad\x47\x49\x9a\x2e\x15\xdf\xbf\xae\x75\x0a\x17\xda\xb2\x36\xff\x05\x00\x00\xff\xff\xdd\xdb\xd0\x5d\x1a\x04\x00\x00")

func imagesBaseCleanInstallBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseCleanInstall,
		"images/base/clean-install",
	)
}

func imagesBaseCleanInstall() (*asset, error) {
	bytes, err := imagesBaseCleanInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/clean-install", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":         imagesBaseDockerfile,
	"images/base/clean-install":      imagesBaseCleanInstall,
	"images/base/entrypoint/main.go": imagesBaseEntrypointMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile":    {imagesBaseDockerfile, map[string]*bintree{}},
			"clean-install": {imagesBaseCleanInstall, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
